%[ $LF_LEVEL -eq 1 ] || echo "Warning: You're in a nested lf instance!"

# SHELL
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# OPTIONS
set icons true
# set colors true
set hidden true
set drawbox true
set scrolloff 10
set sixel true
set previewer ~/.config/lf/previewer.sh
# set cleaner ~/.config/lf/clear_img.sh
set cursorpreviewfmt "\033[7m"

# COMMANDS
cmd trash %trash-put $fx

cmd mvdir ${{
  set -f
  printf "Directory Name: "
  read newd
  mkdir -- "$newd"
  mv -- $fx "$newd"
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd trash_empty %trash-empty
cmd trash_restore $trash-restore

# Find file in current directory with fzf
cmd fzf_jump ${{
  res="$(find . -maxdepth 1 | fzf --reverse --preview 'bat --color=always {}' --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  if [ -d "$res" ] ; then
      cmd="cd"
  elif [ -f "$res" ] ; then
      cmd="select"
  else
      exit 0
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Find file based on the content of the file (ripgrep)
cmd fzf_search ${{
  res="$( \
      RG_PREFIX="rg --column --line-number --no-heading --color=always \
          --smart-case "
      FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
          fzf --bind "change:reload:$RG_PREFIX {q} || true" \
          --ansi --layout=reverse --header 'Search in files' \
          | cut -d':' -f1
  )"
  [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

# Extract
cmd extract ${{
  set -f
  case $f in
      *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
      *.tar.gz|*.tgz) tar xzvf $f;;
      *.tar.xz|*.txz) tar xJvf $f;;
      *.zip) unzip $f;;
      *.rar) unrar x $f;;
      *.7z) 7z x $f;;
  esac
}}

# Compress to tar
cmd tar ${{
  set -f
  mkdir $1
  cp -r $fx $1
  tar czf $1.tar.gz $1
  rm -r $1
}}

# Compress to zip
cmd zip ${{
  set -f
  mkdir $1
  cp -r $fx $1
  zip -r $1.zip $1
  rm -r $1
}}

# Open
cmd open &{{
  case $(file --mime-type -Lb $f) in
      text/*|application/json) lf -remote "send $id \$$EDITOR \$fx";;
      image/*) imv "$f" & disown;;
      video/*) mpv "$f" & disown;;
      *) echoerr "Can't open file";;
  esac
}}

# MAPPINGS
map m
map n
map t
map d
map e
map f
map w

map p paste
map x cut
map y copy

map zh set hidden!
map zn set info
map zs set info size
map zt set info time
map za set info size:time

map sr set reverse!
map sn :set sortby natural; set info
map ss :set sortby size; set info size
map st :set sortby time; set info time
map sa :set sortby atime; set info atime
map sc :set sortby ctime; set info ctime
map se :set sortby ext; set info

map gh cd ~
map gc cd ~/.de
map gd cd ~/Documents/dev
map gw cd ~/Documents/wiki

map md mkdir
map mf mkfile

map dd trash
map dr trash_restore

map ff fzf_jump
map fg fzf_search

map ax extract

map <enter> shell
map ee $$EDITOR "$f"
map es $sudo $EDITOR "$f"
map i $$PAGER "$f"
